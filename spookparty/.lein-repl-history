(string? nil)
(not nil? 1)
(not= nil? 1)
(apply (\﻿ \a \s \f \s \a \f \s \k) (\s \a \f \d \s \a) () (\s \a \f \s \a) (\s \a \f) (\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(apply str (\﻿ \a \s \f \s \a \f \s \k) (\s \a \f \d \s \a) () (\s \a \f \s \a) (\s \a \f) (\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(apply str '(\﻿ \a \s \f \s \a \f \s \k) (\s \a \f \d \s \a) () (\s \a \f \s \a) (\s \a \f) (\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(map str '(\﻿ \a \s \f \s \a \f \s \k) (\s \a \f \d \s \a) () (\s \a \f \s \a) (\s \a \f) (\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(map str '(\﻿ \a \s \f \s \a \f \s \k)' (\s \a \f \d \s \a) '() '(\s \a \f \s \a) '(\s \a \f) '(\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(map concat '(\﻿ \a \s \f \s \a \f \s \k)' (\s \a \f \d \s \a) '() '(\s \a \f \s \a) '(\s \a \f) '(\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(map concat '(\﻿ \a \s \f \s \a \f \s \k ' (\s \a \f \d \s \a) '() '(\s \a \f \s \a) '(\s \a \f) '(\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(map concat '(\﻿ \a \s \f \s \a \f \s \) '(\s \a \f \d \s \a) '() '(\s \a \f \s \a) '(\s \a \f) '(\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(map concat '(\﻿ \a \s \f \s \a \f \s k) '(\s \a \f \d \s \a) '() '(\s \a \f \s \a) '(\s \a \f) '(\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(concat '(\﻿ \a \s \f \s \a \f \s k) '(\s \a \f \d \s \a) '() '(\s \a \f \s \a) '(\s \a \f) '(\4 \5 \3 \q \9 \3 \2 \0 \9 \5))
(def s "test")
(= s "test")
(partial + 3 4)
(def f (partial + 3 4))
f
(f)
(take 5 (cycle [2 3]))
(def g (partial * 3 4))
(g)
(take 5 (cycle [f g]))
(map % (take 5 (cycle [f g])))
(map #(%) (take 5 (cycle [f g])))
(partition 2 [1 2 3 4 5 6])
(take-while #(odd? (first %)) (partition 2 [1 2 3 4 5 6]))
(take-while #(odd? (first %)) (partition 2 [1 2 3 4 4 5 6]))
(take-while #(odd? (first %)) (partition 2 [1 2 3 4 5 6]))
(doall (take-while #(odd? (first %)) (partition 2 [1 2 3 4 5 6])))
(doall (take-while #(odd? (first %)) (partition 2 [1 2 3 4 4 5 6])))
(doseq (take-while #(odd? (first %)) (partition 2 [1 2 3 4 4 5 6])))
(take 6 (iterate (fn[a b] [b (+ a b)]) [0 0]))
(take 6 (iterate #([%2 (+ %1 %2)]) [0 0]))
(take 6 (iterate (fn[a b] [b (+ a b)]) [0 0]))
(take 6 (iterate (fn[a b] [b (+ a b)]) 0 0))
(take 6 (iterate (fn[a b] [b (+ a b)]) [0 0]))
(take 10 (map first (iterate #([{a b]] [b (+ a b)]) [0 1])))
(take 10 (map first (iterate #([[a b]] [b (+ a b)]) [0 1]))~)
(take 10 (map first (iterate #([[a b]] [b (+ a b)]) [0 1])))
(take 10 (map first (iterate #([[a b]] [b (+ a b)]) [0 1]))
(take 10 (iterate #([[a b]] [b (+ a b)]) [0 1]))
(take 10 (iterate #([[%1 %2]] [%2 (+ %1 %2)]) [0 1]))
(take 10 (iterate #([%2 (+ %1 %2)]) [0 1]))
(take 10 (iterate #(vec (list %2 (+ %1 %2)))) [0 1]))
(take 10 (iterate #(vec (list %2 (+ %1 %2))) [0 1]))
(take 10 (iterate #([[a b]] [b (+ a b)]) [0 1]))
(take 10 (iterate (fn[[a b]] [b (+ a b)]) [0 1]))
(take 10 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 30 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 60 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 100 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 70 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 90 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 95 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 93 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 91 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 92 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(take 93 (map first (iterate (fn[[a b]] [b (+ a b)]) [0 1])))
(reduce * (range 1 10))
(reduce * (range 1 3))
(rnge 1 3)
(range 1 3)
(reduce * (range 1 (inc 3)))
(reduce * (range 1 (inc 5)))
(reduce * (range 1 (inc 100)))
(reduce * (range 1 (inc 80)))
(reduce * (range 1 (inc 60)))
(reduce * (range 1 (inc 40)))
(reduce * (range 1 (inc 30)))
(reduce * (range 1 (inc 20)))
(reduce * (range 1 (inc 25)))
(reduce * (range 1 (inc 22)))
(reduce * (range 1 (inc 21)))
(reduce * (range 1 (inc 20)))
(slurp "test.txt")
(map #(.exists (clojure.java.io/as-file %)) '("/input.txt" "/docs" "./input.txt" "./docs"))
(concat "sadfsad" "fuzufui4t")
(apply str (concat "sadfsad" "fuzufui4t"))
(empty? "")
(empty? nil)
(empty? "s")
(pos? 9)
(pos? nil)
(num? 9)
(int? 'a')
(int? '\')
(char? '\')
(def bc [true false true])
(if bc[0])
(if bc[0] 2 3)
(if (bc[0]) 2 3)
(if (nth 0 bc) 2 3)
(if (nth bc 0) 2 3)
(conj (vec '(1 3)) '/')
(conj "bnb" '/')
(concat (vec '(1 3)) "/")
(f)
(defn f [] (+ 2 3))
(defn g [] (* 2 3))
(def v [f g])
(first v)
((first v))
(partition 2 [1 2 3 4 5 6 7])
(concat (partition 2 [1 2 3 4 5 6 7 8]))
(apply concat (partition 2 [1 2 3 4 5 6 7 8]))
(drop-while ((+ 1 2) ))
(drop-while #((+ 1 2) (= % 5) [1 2 3 4 5 6 7])
(drop-while #((+ 1 2) (= % 5)) [1 2 3 4 5 6 7])
(drop-while #(= % 5) [1 2 3 4 5 6 7])
(drop-while #(< % 5) [1 2 3 4 5 6 7])
(drop-while #(do (* 5 6)(< % 5)) [1 2 3 4 5 6 7])
(drop-while #(do (prn "42!")(< % 5)) [1 2 3 4 5 6 7])
(take 10 (cycle [1 2 3 4]))
(take 10 nil)
(take 10 [])
(cycle [[1 2]])
(take 4 (cycle [[1 2]]))
